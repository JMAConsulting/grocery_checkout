<?php

function grocery_checkout_get_webform_submission($order) {
  $orderID = $order->order_id;
  $lineitems = array();
  
  $result = db_select('webform_submitted_data', 'w')
    ->fields('w', array('cid', 'nid', 'data'))
    ->condition('data', '%"order_id":"' . db_like($orderID) . '"%', 'LIKE')
    ->condition('nid', 517, '=')
    ->execute()
    ->fetchAll();
  if (!empty($result)) {
    foreach ($result as $key => $object) {
      $formkey = db_select('webform_component', 'c')
        ->fields('c', array('form_key'))
        ->condition('cid', $object->cid, '=')
        ->condition('nid', $object->nid, '=')
        ->execute()
        ->fetchAll();
      $json = json_decode($object->data);
      $date = getDates($formkey[0]->form_key);
      if ($date) {
        $price = getPrice($json->line_item_id, $json->quantity);
        $lineitems[$json->line_item_id] = array('dates' => $date, 'charge' => $price);
      }
    }
  }
  return $lineitems;
}

function getPrice($line_item_id, $quantity) {
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item_id);
  $product_wrapper = $line_item_wrapper->commerce_product;
  $charge = commerce_price_wrapper_value($product_wrapper, 'commerce_price', TRUE);
  $price = commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']);
  return array('amount' => ($price * $quantity), 'currency' => $charge['currency_code']);
}


function getDates($formkey) {
  $values = explode('_', $formkey);
  $month = $values[0];
  $start = $values[1];
  $end = $values[2];
  $year = "";
  if (in_array($month, array('Oct', 'Nov', 'Dec'))) {
    $year = 2017;
  }
  elseif (in_array($month, array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'))) {
    $year = 2018;
  }
  if ($year) {
    $startDate = date('c', strtotime($start . ' ' . $month . ' ' . $year . ' ' . '00:00:00'));
    $endDate = date('c', strtotime($end . ' ' . $month . ' ' . $year . ' ' . '00:00:00'));
    return array('beginDate' => $startDate, 'endDate' => $endDate);
  }
  return FALSE;
}

function processResponse($response, $payment_method, $payment_data, $order, $charge) {
  if ($response != NULL) {
    // Log the payment response.
    if ($payment_method['settings']['log']['response'] === 'response') {
      commerce_iats_log_response($payment_method, $response);
    }

    $auth_result = NULL;
    $transaction_id = NULL;
    $customer_code = NULL;

    if (is_array($response)) {
      if (isset($response['AUTHRESULT'])) {
        // Account for direct debit validation transaction.
        $auth_result = trim($response['AUTHRESULT']['AUTHSTATUS']);
      }
      elseif (isset($response['AUTHORIZATIONRESULT'])) {
        // Account for regular transaction.
        $auth_result = trim($response['AUTHORIZATIONRESULT']);
      }

      $transaction_id = (isset($response['TRANSACTIONID'])) ?
        trim($response['TRANSACTIONID']) : NULL;
      $customer_code = (isset($response['CUSTOMERCODE']) &&
        !empty($response['CUSTOMERCODE'])) ?
        trim($response['CUSTOMERCODE']) : NULL;
    }

    // If AUTHORIZATIONRESULT or AUTHRESULT are not set, then the API returned
    // an error. Assign it here for logging purposes.
    if ($auth_result == NULL) {
      $auth_result = $response;
    }

    // Creating a recurring payment does not result in a transaction ID.
    // Add custom transaction ID here for reference.
    if (($transaction_id == NULL)
      && (isset($payment_method['settings']['allow_recurring'])
        && $payment_method['settings']['allow_recurring'] == 1)) {
      $transaction_id = COMMERCE_IATS_RECURRING_PAYMENT_TRANSACTION_ID;
    }

    // Build the remote ID from the transaction ID and customer code.
    $remote_id = $transaction_id;
    if ($customer_code != NULL) {
      $remote_id .= '|' . $customer_code;
    }

    // Prepare a transaction object to log the API response.
    $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->remote_id = $remote_id;
    $transaction->amount = $charge['amount'];
    $transaction->currency_code = $charge['currency_code'];
    if (is_array($payment_data) && isset($payment_data['line_item'])) {
      $transaction->line_item_id = $payment_data['line_item'];
    }

    $type = NULL;
    if (is_a($payment_data, 'CommerceCardOnFile')) {
      $type = $payment_data->card_type;
    }
    elseif (isset($payment_data['bank_account'])) {
      $type = $payment_data['bank_account']['type'];
    }
    elseif (isset($payment_data['credit_card'])) {
      $type = $payment_data['credit_card']['type'];
    }
    elseif (isset($payment_data['transaction'])) {
      $type = $payment_data['transaction']->payload['type'];
    }

    $transaction->payload = array(
      'type' => $type,
    );

    if (is_array($auth_result)) {
      if (isset($auth_result['code'])) {
        // Create a failed transaction with the error message.
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;

        if (isset($payment_method['settings']['detailed_failure_message'])
          && $payment_method['settings']['detailed_failure_message'] == 1) {
          $message = array($auth_result['message']);
        }
        else {
          $message = array('Transaction failed.');
        }
      }
      else {
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $message = array('Transaction successful.');
        if (!is_null($customer_code)) {
          $message[] = 'Customer code created: ' . $customer_code;
        }
        if ($payment_method['method_id'] == 'iats_ach_eft') {
          $message[] = 'ACH/EFT payment pending.';
        }
      }
    }
    else {
      if (strpos($auth_result, COMMERCE_IATS_TXN_OK) === 0) {
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $message = array('Transaction successful.');
        if (!is_null($customer_code)) {
          $message[] = 'Customer code created: ' . $customer_code;
        }
        if ($payment_method['method_id'] == 'iats_ach_eft') {
          $message[] = 'ACH/EFT payment pending.';
        }
      }
      else {
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        $message = array('Transaction failed.') . $auth_result;
      }
    }

    $transaction->message = implode('<br />', $message);

    // Save the transaction information.
    commerce_payment_transaction_save($transaction);

    // If the payment failed, display an error and rebuild the form.
    if ($transaction->status != COMMERCE_PAYMENT_STATUS_SUCCESS) {
      if (is_array($auth_result)) {
        $error_reason = $auth_result['message'];
        if (isset($response['AUTHRESULT']['BANKERROR'])) {
          $error_reason .= ': ' . $response['AUTHRESULT']['BANKERROR'];
        }
      }
      else {
       $error_reason = $auth_result;
      }

      drupal_set_message(
        t('We received the following error while attempting to process your payment: @reason',
          array('@reason' => $error_reason)),
        'error'
      );
      return FALSE;
    }
  }
  else {
    drupal_set_message(
      t('We encountered an error contacting our payment processor. Please try submitting your payment again.'),
      'error'
    );
    return FALSE;
  }
  return $response;
}
