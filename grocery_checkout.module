<?php

function grocery_checkout_get_webform_submission($order) {
  $orderID = $order->order_id;
  $lineitems = array();
  
  $result = db_select('webform_submitted_data', 'w')
    ->fields('w', array('cid', 'nid', 'data'))
    ->condition('data', '%"order_id":"' . db_like($orderID) . '"%', 'LIKE')
    ->condition('nid', 517, '=')
    ->execute()
    ->fetchAll();
  if (!empty($result)) {
    foreach ($result as $key => $object) {
      $formkey = db_select('webform_component', 'c')
        ->fields('c', array('form_key'))
        ->condition('cid', $object->cid, '=')
        ->condition('nid', $object->nid, '=')
        ->execute()
        ->fetchAll();
      $json = json_decode($object->data);
      $date = getDates($formkey[0]->form_key);
      if ($date) {
        $price = getPrice($json->line_item_id, $json->quantity);
        $lineitems[$json->line_item_id] = array('dates' => $date, 'charge' => $price, 'order_id' => $orderID);
      }
    }
  }
  return $lineitems;
}

function getPrice($line_item_id, $quantity) {
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item_id);
  $product_wrapper = $line_item_wrapper->commerce_product;
  $charge = commerce_price_wrapper_value($product_wrapper, 'commerce_price', TRUE);
  $price = commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']);
  return array('amount' => ($price * $quantity), 'currency' => $charge['currency_code']);
}


function getDates($formkey) {
  $values = explode('_', $formkey);
  $month = $values[0];
  $start = $values[1];
  $end = $values[2];
  $year = "";
  if (in_array($month, array('Oct', 'Nov', 'Dec'))) {
    $year = 2017;
  }
  elseif (in_array($month, array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'))) {
    $year = 2018;
  }
  if ($year) {
    $startDate = date('c', strtotime($start . ' ' . $month . ' ' . $year . ' ' . '00:00:00'));
    $endDate = date('c', strtotime($end . ' ' . $month . ' ' . $year . ' ' . '00:00:00'));
    return array('beginDate' => $startDate, 'endDate' => $endDate);
  }
  return FALSE;
}

function addPayments($response, $payment_method, $payment_data, $order, $lineitems) {
  if ($response != NULL) {

    // Create pending transactions and
    // insert the lineitems in our table for processing future payments.

    foreach ($lineitems as $item_id => $attributes) {
      $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
      $transaction->amount = commerce_currency_decimal_to_amount($attributes['charge']['amount'], $attributes['charge']['currency']);
      $transaction->currency_code = $attributes['charge']['currency'];
      $transaction->line_item_id = $item_id;
      $transaction->payload = array(
        'type' => $payment_data['credit_card']['type'],
      );
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      $date = date('jS M Y', strtotime($attributes['dates']['beginDate']));
      $transaction->message = t("Payment will be processed on {$date}");

      // Save the transaction information.
      $pending_payment = commerce_payment_transaction_save($transaction);
      if ($pending_payment) {
        db_merge('grocery_checkout_schedule')
          ->key(array('line_item_id' => $item_id))
          ->fields(array(
            'order_id' => $attributes['order_id'],
            'customer_code' => $response['CUSTOMERCODE'],
            'transaction_id' => $transaction->transaction_id,
            'amount' => $attributes['charge']['amount'] . ' ' . $attributes['charge']['currency'],
            'scheduled_date' => $attributes['dates']['beginDate'],
          ))
          ->execute();
      }
    }
  }
}
