<?php

define('PAYMENT_INSTANCE', 'iats_ach_eft_customer_code|rules_grocery_card');

function grocery_checkout_menu() {
  $items['admin/commerce/orders/ajax/%/payment/%/cancel'] = array(
    'title' => 'Cancel',
    'page callback' => 'cancel_payment',
    'delivery_callback' => 'ajax_deliver',
    'page arguments' => array(4, 6),
    'access arguments' => array('update payments'),
    'type' => MENU_CALLBACK
  );
  $items['admin/commerce/orders/ajax/%/payment/%/enable'] = array(
    'title' => 'Enable',
    'page callback' => 'enable_payment',
    'delivery_callback' => 'ajax_deliver',
    'page arguments' => array(4, 6),
    'access arguments' => array('update payments'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

function cancel_payment($order_id, $payment_id) {
  db_merge('grocery_checkout_schedule')
    ->key(array('transaction_id' => $payment_id))
    ->fields(array(
      'is_cancelled' => 1,
      ))
      ->execute();
  $content = '<a id="enablelink" class="use-ajax" href="' . url("admin/commerce/orders/ajax/{$order_id}/payment/{$payment_id}/enable", array('absolute' => TRUE)) . '">Enable</a>';
  $commands = array();
  $commands[] = ajax_command_replace('#cancellink', $content);
  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
}

function enable_payment($order_id, $payment_id) {
  db_merge('grocery_checkout_schedule')
    ->key(array('transaction_id' => $payment_id))
    ->fields(array(
      'is_cancelled' => 0,
      ))
      ->execute();
  $content = '<a id="cancellink" class="use-ajax" href="' . url("admin/commerce/orders/ajax/{$order_id}/payment/{$payment_id}/Cancel", array('absolute' => TRUE)) . '">Cancel</a>';
  $commands = array();
  $commands[] = ajax_command_replace('#enablelink', $content);
  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
}

function grocery_checkout_get_webform_submission($order) {
  $orderID = $order->order_id;
  $lineitems = array();
  
  $result = db_select('webform_submitted_data', 'w')
    ->fields('w', array('cid', 'nid', 'data'))
    ->condition('data', '%"order_id":"' . db_like($orderID) . '"%', 'LIKE')
    ->condition('nid', 517, '=')
    ->execute()
    ->fetchAll();
  if (!empty($result)) {
    foreach ($result as $key => $object) {
      $formkey = db_select('webform_component', 'c')
        ->fields('c', array('form_key'))
        ->condition('cid', $object->cid, '=')
        ->condition('nid', $object->nid, '=')
        ->execute()
        ->fetchAll();
      $json = json_decode($object->data);
      $date = getDates($formkey[0]->form_key);
      if ($date) {
        $price = getPrice($json->line_item_id, $json->quantity);
        $lineitems[] = array('dates' => $date, 'charge' => $price, 'order_id' => $orderID, 'line_item_id' => $json->line_item_id);
      }
    }
  }
  else {
    $result = db_select('webform_submitted_data', 'w')
      ->fields('w', array('cid', 'nid', 'data'))
      ->condition('data', '%"order_id":"' . db_like($orderID) . '"%', 'LIKE')
      ->condition('nid', 528, '=')
      ->execute()
      ->fetchAll();
    if (!empty($result)) {
      foreach ($result as $key => $object) {
        $json = json_decode($object->data);
        if ($json) {
          $price = getPrice($json->line_item_id, $json->quantity);
          $lineitems[] = array('charge' => $price, 'order_id' => $orderID, 'line_item_id' => $json->line_item_id);
        }
      }
    }
  }
  return $lineitems;
}

function getPrice($line_item_id, $quantity) {
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item_id);
  $product_wrapper = $line_item_wrapper->commerce_product;
  $charge = commerce_price_wrapper_value($product_wrapper, 'commerce_price', TRUE);
  $price = commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']);
  return array('amount' => ($price * $quantity), 'currency' => $charge['currency_code']);
}


function getDates($formkey) {
  $values = explode('_', $formkey);
  $month = $values[0];
  $start = $values[1];
  $end = $values[2];
  $year = "";
  if (in_array($month, array('Aug', 'Oct', 'Nov', 'Dec'))) {
    $year = 2017;
  }
  elseif (in_array($month, array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'))) {
    $year = 2018;
  }
  if ($year) {
    $startDate = date('c', strtotime($start . ' ' . $month . ' ' . $year . ' ' . '00:00:00'));
    $endDate = date('c', strtotime($end . ' ' . $month . ' ' . $year . ' ' . '00:00:00'));
    return array('beginDate' => $startDate, 'endDate' => $endDate);
  }
  return FALSE;
}

function addPayments($response, $payment_method, $payment_data, $order, $lineitems) {
  if ($response != NULL) {

    // Create pending transactions and
    // insert the lineitems in our table for processing future payments.
    foreach ($lineitems as $item_id => $attributes) {
      $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
      $transaction->amount = commerce_currency_decimal_to_amount($attributes['charge']['amount'], $attributes['charge']['currency']);
      $transaction->currency_code = $attributes['charge']['currency'];
      $transaction->line_item_id = $attributes['line_item_id'];
      $transaction->payload = array(
        'type' => $payment_data['bank_account']['type'],
      );
      $transaction->payment_method = 'iats_ach_eft_customer_code';
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      if (!empty($attributes['dates'])) {
        $date = date('jS M Y', strtotime($attributes['dates']['beginDate']));
        // Change date to 9th of every month
        $date = '9th ' . date('M Y', strtotime($attributes['dates']['beginDate']));
        $processDate = date('Y-m-09', strtotime($attributes['dates']['beginDate']));
        $onetime = FALSE;
      }
      else {
        $date = date('jS M Y', strtotime('+1 day'));
        $processDate = date('Y-m-d', strtotime('+1 day'));
        // This is a one time payment.
        $onetime = TRUE;
      }
      $transaction->message = t("Payment will be processed on {$date}");

      // Save the transaction information.
      $pending_payment = commerce_payment_transaction_save($transaction);
      if ($pending_payment) {
        db_insert('grocery_checkout_schedule')
          ->fields(array(
            'order_id' => $attributes['order_id'],
            'customer_code' => $response['CUSTOMERCODE'],
            'transaction_id' => $transaction->transaction_id,
            'amount' => $attributes['charge']['amount'] . ' ' . $attributes['charge']['currency'],
            'scheduled_date' => $processDate,
            'line_item_id' => $attributes['line_item_id'],
          ))
          ->execute();

        // Cancel the failed payment for this order and updated the future orders.
        if ($onetime) {
          $query = db_select('webform_submitted_data', 'w')
            ->fields('w', array('sid'))
            ->condition('data', '%"order_id":"' . db_like($attributes['order_id']) . '"%', 'LIKE')
            ->condition('nid', 528, '=')
            ->range(0,1)
            ->execute()->fetchAll();
          if ($query[0]->sid) {
            $sub = db_select('webform_submitted_data', 'w')
              ->fields('w', array('cid', 'data'))
              ->condition('sid', $query[0]->sid, '=')
              ->condition('nid', 528, '=')
              ->condition('cid', array(5, 6), 'IN')
              ->execute()->fetchAll();
            foreach ($sub as $data) {
              if ($data->cid == 5) {
                $prevOrder = $data->data;
              }
              if ($data->cid == 6) {
                $prevTrxn = json_decode($data->data);
              }
            }
	    if ($prevTrxn) {
              db_update('grocery_checkout_schedule')
                ->fields(array('is_cancelled' => 1))
                ->condition('transaction_id', $prevTrxn, 'IN')
                ->execute();
            }
	    if ($prevOrder) {
              db_update('commerce_payment_transaction')
                ->fields(array('order_id' => $prevOrder))
                ->condition('order_id', $attributes['order_id'], '=')
                ->execute();
              db_update('grocery_checkout_schedule')
                ->fields(array('order_id' => $prevOrder))
                ->condition('order_id', $attributes['order_id'], '=')
                ->execute();
              db_delete('grocery_checkout_schedule')
                ->condition('order_id', $attributes['order_id'])
                ->execute();
              db_update('grocery_checkout_schedule')
                ->fields(array('customer_code' => $response['CUSTOMERCODE']))
                ->condition('order_id', $prevOrder, '=')
                ->execute();
            }
          }
        }
      }
    }
  }
}

function processResponse($response, $payment_method, $payment_id) {
  if ($response != NULL) {
    // Log the payment response.
    if ($payment_method['settings']['log']['response'] === 'response') {
      commerce_iats_log_response($payment_method, $response);
    }

    $auth_result = NULL;
    $transaction_id = NULL;
    $customer_code = NULL;

    if (is_array($response)) {
      if (isset($response['AUTHRESULT'])) {
        // Account for direct debit validation transaction.
        $auth_result = trim($response['AUTHRESULT']['AUTHSTATUS']);
      }
      elseif (isset($response['AUTHORIZATIONRESULT'])) {
        // Account for regular transaction.
        $auth_result = trim($response['AUTHORIZATIONRESULT']);
      }

      $transaction_id = (isset($response['TRANSACTIONID'])) ?
        trim($response['TRANSACTIONID']) : NULL;
      $customer_code = (isset($response['CUSTOMERCODE']) &&
        !empty($response['CUSTOMERCODE'])) ?
        trim($response['CUSTOMERCODE']) : NULL;
    }

    // If AUTHORIZATIONRESULT or AUTHRESULT are not set, then the API returned
    // an error. Assign it here for logging purposes.
    if ($auth_result == NULL) {
      $auth_result = $response;
    }

    // Creating a recurring payment does not result in a transaction ID.
    // Add custom transaction ID here for reference.
    if (($transaction_id == NULL)
      && (isset($payment_method['settings']['allow_recurring'])
        && $payment_method['settings']['allow_recurring'] == 1)) {
      $transaction_id = COMMERCE_IATS_RECURRING_PAYMENT_TRANSACTION_ID;
    }

    // Build the remote ID from the transaction ID and customer code.
    $remote_id = $transaction_id;
    if ($customer_code != NULL) {
      $remote_id .= '|' . $customer_code;
    }

    // Prepare a transaction object to log the API response.
    $transaction = commerce_payment_transaction_load($payment_id);
    $transaction->remote_id = $remote_id;

    if (is_array($auth_result)) {
      if (isset($auth_result['code'])) {
        // Create a failed transaction with the error message.
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;

        if (isset($payment_method['settings']['detailed_failure_message'])
          && $payment_method['settings']['detailed_failure_message'] == 1) {
          $message = array($auth_result['message']);
        }
        else {
          $message = array('Transaction failed.');
        }
      }
      else {
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $message = array('Transaction successful.');
        if (!is_null($customer_code)) {
          $message[] = 'Payment has been processed ' . date('jS M Y');
        }
      }
    }
    else {
      if (strpos($auth_result, COMMERCE_IATS_TXN_OK) === 0) {
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $message = array('Transaction successful.');
        if (!is_null($customer_code)) {
          $message[] = 'Payment has been processed on ' . date('jS M Y');
        }
      }
      else {
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        $message = array('Transaction failed.') . $auth_result;
      }
    }

    $transaction->message .= '<br/>' . implode('<br />', $message);
    // Save the transaction information.
    commerce_payment_transaction_save($transaction);

    // If the payment failed, display an error and rebuild the form.
    if ($transaction->status != COMMERCE_PAYMENT_STATUS_SUCCESS) {
      if (is_array($auth_result)) {
        $error_reason = $auth_result['message'];
        if (isset($response['AUTHRESULT']['BANKERROR'])) {
          $error_reason .= ': ' . $response['AUTHRESULT']['BANKERROR'];
        }
      }
      else {
       $error_reason = $auth_result;
      }

      watchdog(
        t('We received the following error while attempting to process your payment: @reason for payment id: @payment_id',
          array('@reason' => $error_reason, '@payment_id' => $payment_id)),
        WATCHDOG_ERROR
      );
      return FALSE;
    }
  }
  else {
    watchdog(
      t('We encountered an error contacting our payment processor. Please try submitting your payment again.'),
      WATCHDOG_ERROR
    );
    return FALSE;
  }
}

function generatePayments() {
  $query = db_select('grocery_checkout_schedule', 'g')
    ->fields('g', array('order_id', 'customer_code'))
    ->condition('g.is_cancelled', 0, '=')
    ->groupBy('g.order_id');
  $query->addExpression('COUNT(g.order_id)', 'ncount');
  $query->havingCondition('ncount', 1);
  $result = $query->execute()->fetchAll();
  if (!empty($result)) {
    foreach ($result as $id => $object) {
      $commercepayment = db_select('commerce_payment_transaction', 't')
        ->fields('t', array('amount', 'status', 'payload'))
        ->condition('t.order_id', $object->order_id, '=');
      $trxns = $commercepayment->execute()->fetchAll();
      $lineitemamounts = array();
      foreach ($trxns as $trxn) {
        if ($trxn->status != 'success') {
          $lineitemamounts[] = $trxn->amount;
        }
        else {
          $totalamount = $trxn->amount;
          $payload = unserialize($trxn->payload);
        }
      }
      $lineitemamount = array_sum($lineitemamounts);
      if ($lineitemamount != $totalamount) {
        $order = new stdClass();
        $order->order_id = $object->order_id; 
        $lineitems = grocery_checkout_get_webform_submission($order);
        $response = array('CUSTOMERCODE' => $object->customer_code);
        $paymentdata = array('bank_account' => $payload);
        db_delete('grocery_checkout_schedule')
          ->condition('order_id', $object->order_id)
          ->execute();
        addPayments($response, $payment_method, $paymentdata, $order, $lineitems);
      }
    }
  }
}

function grocery_checkout_cron() {
  // Check if pending order date matches current date.
  $query = db_select('grocery_checkout_schedule', 'g')
    ->fields('g')
    ->fields('p', array('payload'))
    ->condition('p.status', 'pending', '=')
    ->condition('g.is_cancelled', 0, '=')
    ->where("DATE(g.scheduled_date) = DATE(NOW())");
  $query->innerJoin('commerce_payment_transaction', 'p', 'p.transaction_id = g.transaction_id');
  $result = $query->execute()->fetchAll();
  $payment_method = commerce_payment_method_instance_load(PAYMENT_INSTANCE);
  if (!empty($result)) {
    foreach ($result as $id => $object) {
      $payload = unserialize($object->payload);
      $amount = explode(' ', $object->amount);
      $request = array(
        'customerIPAddress' => ip_address(),
        'customerCode' => $object->customer_code,
        'invoiceNum' => $object->transaction_id,
        'total' => $amount[0],
        'comment' => 'Order ID ' . $object->order_id,
        'currency' => $amount[1],
      );
      $iats = commerce_iats_get_service('ProcessLink', $payment_method);
      if ($iats == NULL) {
        watchdog('grocery_checkout', t('Unable to load iATS Payments library.'), WATCHDOG_ERROR);
        return NULL;
      }
      $response = $iats->ProcessACHEFTWithCustomerCode($request);
      processResponse($response, $payment_method, $object->transaction_id); 
    }
  }
}

function check_grocery_order($order_id) {
  $result = db_select('grocery_checkout_schedule', 'g')
      ->fields('g')
      ->condition('order_id', $order_id, '=')
      ->execute()
      ->fetchAll();
  return $result;
}

function grocery_checkout_views_pre_build(&$view) {
  if ($view->name == 'commerce_payment_order') {
    if (check_grocery_order($view->args[0])) {
      unset($view->field['payment_method']);
      unset($view->field['operations_1']);
    }
    else {
     unset($view->field['type']);
     unset($view->field['mail']);
     unset($view->field['order_id']);  
     unset($view->field['order_number']);     
     unset($view->field['remote_status']);
    }
  }
}

function grocery_checkout_views_query_alter(&$view, &$query) {
  if ($view->name == 'commerce_payment_order') {
    if ($result = check_grocery_order($view->args[0])) {
      $join = new views_join();
      $join->table = "commerce_line_item";
      $join->field = "line_item_id";
      $join->left_table = "commerce_payment_transaction";
      $join->left_field = "line_item_id";
      $join->type = "inner";
      $query->add_relationship('line_items', $join, 'commerce');
      $query->add_field('line_items', 'quantity', 'commerce_line_item_quantity');
      $query->add_field('line_items', 'line_item_label', 'commerce_line_item_label');
    }
  }
}

function getQuantity($lineitem) {
  $query = db_select('commerce_payment_transaction', 't')
    ->fields('a', array('commerce_price_amount'))
    ->condition('t.transaction_id', $lineitem->transaction_id, '=');
  $query->innerJoin('commerce_line_item', 'l', 'l.line_item_id = t.line_item_id');
  $query->innerJoin('commerce_product', 'p', 'p.sku = l.line_item_label');
  $query->innerJoin('field_data_commerce_price', 'a', 'a.entity_id = p.product_id');
  $amount = $query->execute()->fetchAll();
  return $lineitem->commerce_payment_transaction_amount / $amount[0]->commerce_price_amount;
}

function grocery_checkout_views_pre_render(&$view) {
  if ($view->name == 'commerce_payment_order') {
    if ($result = check_grocery_order($view->args[0])) {
      foreach ($view->result as $resultkey => &$row) {
        $row->commerce_order_mail = $row->commerce_line_item_label;
        $quantity = getQuantity($row);
        $row->commerce_order_order_number = (int)$quantity;
        $row->commerce_payment_transaction_created = date('jS M Y', $row->commerce_payment_transaction_created);
        $html[$resultkey][] = '<ul class="links inline operations">
          <li><a href="' . url("admin/commerce/orders/{$row->commerce_order_order_id}/payment/{$row->transaction_id}/view", array('absolute' => TRUE)) . '">View</a></li>';
        foreach ($result as $object) {
          if ($object->transaction_id == $row->transaction_id) {
            $row->commerce_order_uid = date('jS M Y', strtotime($object->scheduled_date));
            // Show cancellation link only before order is processed. After which show delete link.
            if (date('Ymd') < date('Ymd', strtotime($object->scheduled_date))) {
              if ($object->is_cancelled) {
                $html[$resultkey][] = '<li><a id="enablelink" class="use-ajax"
                href="' . url("admin/commerce/orders/ajax/{$row->commerce_order_order_id}/payment/{$row->transaction_id}/enable", array('absolute' => TRUE)) . '">Enable</a></li></ul>';
              }
              else {
                $html[$resultkey][] = '<li><a id="cancellink" class="use-ajax"
                href="' . url("admin/commerce/orders/ajax/{$row->commerce_order_order_id}/payment/{$row->transaction_id}/cancel", array('absolute' => TRUE)) . '">Cancel</a></li></ul>';
              }
            }
            elseif (date('Ymd') > date('Ymd', strtotime($object->scheduled_date))) {
              $html[$resultkey][] = '<li><a href="' . url("admin/commerce/orders/ajax/{$row->commerce_order_order_id}/payment/{$row->transaction_id}/delete", array('absolute' => TRUE)) . '">Delete</a></li></ul>';
            }
          }
        }
      }
      foreach ($html as $key => $text) {
        $html[$key] = implode('', $text);
        $view->style_plugin->render_fields($view->result);
        foreach ($view->style_plugin->rendered_fields as $index => &$rendered_result) {
            $rendered_result['remote_status'] = $html[$index];
        }
      }
    }
  }
}

function grocery_checkout_webform_csv_header_alter(&$header, $component) {
  if ($component['nid'] == 517 && $component['type'] == 'productfield') {
    foreach ($header[2] as &$label) {
      $month = explode(' ', $component['name']);
      $label = str_replace(":", ' '.$month[1].":", $label);
    }
  }
}

function grocery_checkout_form_webform_client_form_528_alter(&$form, &$form_state, $form_id) {
  global $user;
  if ($user->uid) {
    // User is logged in and can access the webform.

    $query = db_select('commerce_payment_transaction', 't')
      ->fields('t')
      ->fields('g', array('amount', 'line_item_id', 'scheduled_date', 'order_id'))
      ->fields('o', array('order_number'))
      ->condition('t.uid', $user->uid, '=')
      ->condition('g.is_cancelled', 0, '=')
      ->condition('t.status', 'failure', '=');
    $query->innerJoin('grocery_checkout_schedule', 'g', 'g.transaction_id = t.transaction_id');
    $query->innerJoin('commerce_order', 'o', 'o.order_id = t.order_id');
    $query->groupBy('g.line_item_id');
    $result = $query->execute()->fetchAll();

    if (!empty($result)) {
      foreach ($result as $key => $object) {
        $form['submitted']['order']['#value'] = $object->order_id;
        $form['submitted']['order']['#attributes'] = array('readonly' => 'readonly');
        $lineitem = db_select('webform_submitted_data', 'w')
          ->fields('w', array('cid', 'nid', 'data'))
          ->condition('data', '%"line_item_id":"' . db_like($object->line_item_id) . '"%', 'LIKE')
          ->condition('nid', 517, '=')
          ->orderBy('cid', 'DESC')
          ->execute()
          ->fetchAll();

        foreach ($lineitem as $items) {
          $json = json_decode($items->data); 
          if ($json->line_item_id == $object->line_item_id) {
            $products[$json->product_id] = $json->quantity;
          }
        }
        $trxns[] = $object->transaction_id;
      }
      $form['submitted']['transaction_id']['#value'] = json_encode($trxns);
      drupal_add_js(array('grocery_checkout' => array('quantities' => json_encode($products))), array('type' => 'setting'));
      drupal_add_js(drupal_get_path('module', 'grocery_checkout') . '/grocery_checkout.js');
    }
  }
}

